class Solution {
    public List<List<Integer>> permuteUnique(int[] nums) {
        HashSet<List<Integer>>ans=new HashSet<>();
        boolean visited[]=new boolean[nums.length];
        backtrack(ans,nums,new LinkedList(),visited);
        return new ArrayList(ans);
    }
    public static void backtrack(HashSet<List<Integer>>ans,int[] nums,List<Integer>curr,boolean[] visited)
    {
        if(curr.size()==nums.length)
        {
            ans.add(new ArrayList(curr));
            return ;
        }
        for(int i=0;i<nums.length;i++)
        {
            if(visited[i]==true)
            continue;
            curr.add(nums[i]);
            visited[i]=true;
            backtrack(ans,nums,curr,visited);
            curr.remove(curr.size()-1);
            visited[i]=false;
        }
    }
}
